.. _releasenotes/1.8:

======================
Dojo 1.8 Release Notes
======================

.. contents ::
   :depth: 3


Browser support
===============

The following browsers have been tested and are supported in this release. If a browser version is not listed as supported, it still may work, especially on browsers with rapid release cycles (Chrome, Firefox). Future minor releases of dojo might include fixes to support future releases of these browsers, but we cannot guarantee it.

Desktop

  * Firefox 3.6-11
  * Safari 5-6
  * Chrome 13-17
  * IE 6-9
  * Opera 10.50-12 (Dojo core only)

Mobile (dojox/mobile)

  * iOS 4.x, 5.x (Mobile Safari) (including all Dijit widgets except Editor, Dialog)
  * Android 2.2-2.3, 3.1-3.2, 4.0
  * Blackberry 6-7
  * Mobile compatibility on desktop browsers: IE 8-9, Firefox 4-11, Safari 5-6, Chrome 13-17

  TODO: Link to page with specific vendor device models tested on

Dojo Base
=========

Dojo Core
=========

dojo/parser
-----------

Module IDs (MIDs)
~~~~~~~~~~~~~~~~~

The Parser now supports the use of Module IDs (MID) when specifying the ``data-dojo-type`` in declarative markup (`#13778 <http://bugs.dojotoolkit.org/ticket/13778>`_).  Developers should use the MID in their code to ensure future compatibility with baseless modules.  Just as before, the parser will not load a module that is not already loaded, therefore they need to be required prior to invoking the parser.

An example:

.. js ::

    require(["dojo/parser","dijit/form/Button","dijit/layout/ContentPane"],
      function(parser) {
        parser.parse();
      }
    );

.. html ::

    <div data-dojo-type="dijit/layout/ContentPane">
      <button data-dojo-type="dijit/form/Button">Click Me!</button>
    </div>

data-dojo-mixins
~~~~~~~~~~~~~~~~

The parser now also supports a new ``data-dojo-mixins`` attribute that allows to dynamically mixin one or several classes into the main ``data-dojo-type`` class as follows:

.. js ::

    require(["dojo/parser", "dojox/treemap/TreeMap", "dojox/treemap/Keyboard", "dojox/treemap/DrillDownUp"],
      function(parser) {
        parser.parse();
      }
    );

.. html ::

    <div data-dojo-type="dojox/treemap/TreeMap" data-dojo-mixins="dojox/treemap/Keyboard, dojox/treemap/DrillDownUp"></div>

parser.construct()
~~~~~~~~~~~~~~~~~~

There's also a new method construct() that's useful for when you have a widget constructor and want to apply it to
a node that may or may not have data-dojo-type specified:

.. js ::

      require(["dojo/parser", "dojo/query", "dijit/form/Slider",], function(parser, query, Slider){
          query("input[type=slider]").forEach(function(node){
               parser.construct(Slider, node);
          }
      }

Script Type "dojo/aspect"
~~~~~~~~~~~~~~~~~~~~~~~~~

The parser now fully supports the declarative script tags with a ``type="dojo/aspect"`` (`#15117 <http://bugs.dojotoolkit.org/ticket/15117>`_).  This allows you to define scripts that run in line with the aspect concepts behind aspect programming used in the :ref:`dojo/aspect <dojo/aspect>` module.

Each of the following is possible:

.. html ::

  <div data-dojo-type="package/module" data-dojo-props="foo:'bar'">
  
    <!-- A script with "before" advice -->
    <script type="dojo/aspect" data-dojo-advice="before" data-dojo-method="method1" data-dojo-args="i">
      console.log("I ran before!");
      i++; // Modify an argument
      return [i]; // Return the modified argument to be used by the original method
    </script>
    
    <!-- A script with "around" advice -->
    <script type="dojo/aspect" data-dojo-advice="around" data-dojo-method="method2" data-dojo-args="origFn">
      return function(){ // you have to be a factory and return a function
        console.log("I ran before!");
        origFn.call(this); // With around advice, you have to call the original method
        console.log("I ran after!");
      });
    </script>
    
    <!-- A script with "after" advice -->
    <script type="dojo/aspect" data-dojo-advice="after" data-dojo-method="method3">
      console.log("I ran after!");
    </script>
    
  </div>

*Note* with the addition of this coupled with the support of script tags of ``type="dojo/on"``, it does mean that script tags of ``type="dojo/connect"`` and ``type="dojo/method"`` are fully deprecated and will likely be dropped in 2.0.  In fact, internally the parser uses ``dojo/aspect`` to accomplish a connect anyways.

dojo/sniff
----------
The dojo/_base/sniff module was superseded by dojo/sniff.
dojo/sniff functions the same way as the old module, except doesn't set globals like dojo.isIE.
Instead, use has("ie") etc.

Dijit
=====
_WidgetBase
-----------
- attribute setters specified with string values can now point to sub-widgets as well as DOMNodes, ex:

.. js ::

    dojo.declare("MyWidget",
        [dijit._WidgetBase, dijit._TemplatedMixin, dijit._WidgetsInTemplateMixin], {

        templateString:
            "<div>" +
                "<button data-dojo-type='dijit/form/Button'
                    data-dojo-attach-point='buttonWidget'>hi</button>" +
                "<input data-dojo-attach-point='focusNode'>" +
            "</div>"

        // Mapping this.label to this.buttonWidget.label
        label: "",
        _setLabelAttr: "buttonWidget",

        // Mapping this.value to this.focusNode DOMNode
        value: "",
        _setValueAttr: "focusNode",
    });

Calendar
--------
- Can now accept a String for the value parameter (either as an argument to the constructor, or to set("value", ...).

.. js ::

    new dijit.Calendar({value: "2011-12-25"});

ContentPane
-----------
ContentPane now supports addChild() and removeChild().

However, the behavior of addChild(widget, index) is undefined if the ContentPane already contains
random HTML.   It's intended to be used when the pane contains just a list of widgets,
like Toolbar or BorderContainer.

Also, ContentPane.addChild(child) will not call resize() on the new child widgets,
so it should be used carefully on ContentPanes inside of a layout widget hierarchy.
Note that resize() only works on visible widgets, not hidden widgets such as unselected tabs
of a TabContainer.

DateTextBox
-----------
- DateTextBox's drop down Calendar no longer automatically opens upon clicking the input area, unless the hasDownArrow=false option is set (in which case that's the only way to open the drop down Calendar).(`#14142 <http://bugs.dojotoolkit.org/ticket/14142>`_)

Dialog
------
- Sizing improved for when Dialog is too big to fit in viewport.   Also, sizing automatically adjusts if users resizes the browser window. (`#14147 <http://bugs.dojotoolkit.org/ticket/14147>`_)

Editor
------
- Performance fixes for editors with lots of text (`#14231 <http://bugs.dojotoolkit.org/ticket/14231>`_)

Menu
----
The Menu widget has two new (optional) attributes:
  - selector:
    CSS selector that specifies that the Menu should be attached, via event delegation,
    to matching subnodes of targetNodeIds, rather than the targetNodeIds nodes themselves.
  - currentTarget:
    (readonly) which node the menu is being displayed for

Together, they allow a single Menu to attach to multiple nodes through delegation,
and for the Menu's action to be adjusted depending on the node.   For example:

.. js ::

  require(["dijit/registry", "dijit/Menu", "dijit/MenuItem"], function(registry, Menu, MenuItem){
      var menu = new Menu({
          targetNodeIds: ["myTable"],
          selector: "td.foo"
      });
      menu.addChild(new MenuItem({
          label: "click me"
          onClick: function(evt){
              var node = this.getParent().currentTarget;
              console.log("menu clicked for node ", node);
          }
      }));
  });

This will track right-click events on each cell of a table with class="foo".

Further, the targetNode's contents can be changed freely after the Menu is created.
Nodes matching the selector can be created or removed, and no calls to bindDomNode() or
unBindDomNode() are necessary.


Tooltip
-------
The Tooltip widget has two new (optional) parameters:
  - selector:
    CSS selector that specifies that the Tooltip should be attached, via event delegation,
    to matching subnodes of the connectId node, rather than the connectId itself.
  - getContent():
    lets the app customize the tooltip text that's displayed based on the node that triggered
    the tooltip.

These parameters allow a single Tooltip widget to display unique tooltips for (for example) each row in a table:

.. js ::

  new Tooltip({
    connectId: myTable,
    selector: "tr",
    getContent: function(matchedNode){ return ...; /* String */}
  });

Further, the table contents can be changed freely after the Tooltip is created.
Rows can be created, removed, or modified, and no calls to the Tooltip widget are necessary.

Another example: specifying selector=".dijitTreeRow" will track mouseenter and mouseleave events on
each row of a Tree, rather than merely monitoring mouseenter/mouseleave on the Tree itself.


Tree
----
- New :ref:`dijit/tree/ObjectStoreModel <dijit/tree/ObjectStoreModel>` class for connecting
  :ref:`dijit/Tree <dijit/Tree>` to stores with the new :ref:`dojo.store <dojo/store>` API.
  (`#13781 <http://bugs.dojotoolkit.org/ticket/13781>`_)
- persist=true flag also saves (and restores) selected Tree nodes (`#14058 <http://bugs.dojotoolkit.org/ticket/14058>`_)
- New expandAll()/collapseAll() methods for expanding/collapsing all the nodes in a Tree dynamically
  (`#14287 <http://bugs.dojotoolkit.org/ticket/14287>`_)

Claro
-----
All browsers except IE now implement shading in the claro theme via CSS gradients, rather than by using images.
This reduces the number of files downloaded, speeding up page load.

Also, the remaining gradient images files (for IE) no longer contain any blue.
Thus, customizing claro to a different does not require modifying those files.
You are still required however to update icon files that contain the theme's primary color, such as:

- checkboxes and radio buttons
- the slider handles
- calendar arrows
- Dialog and TabContainer close icons
- etc.


Performance Improvements
------------------------
There have been many performance improvements to dijit:

- CSS gradients used in claro (see above)
- _CssStateMixin now creates listeners at the document level, rather than separate listeners
  for each widget.   This speeds up page instantiation time, especially on a page with many small widgets
  like TextBoxes, Buttons, Trees (because of the many rows of the Tree), and Menus.
- Similar event delegation changes were made for Menu and Tree, putting the listeners on the Menu or Tree rather than each
  individual MenuItem/TreeNode
- Performance improvement for TabContainers with closable tabs, because only one close Menu is created per
  TabContainer, rather than one Menu per tab.   Event handling was also moved to TabContainer level rather than
  at each individual tab.


DojoX
=====

Charting
--------

- A new dropLabels mode was introduced on axis. It is true by default and allows to drop superfluous labels on the axis. Note that in some cases this might slow down a bit the initial computation of the chart. You can avoid that by:

   * setting dropLabels to false (but then you don't get the automatic drop labels)
   * setting minorLabels to false if you know minorLabels won't show up anyway

- Bars, Columns and Pie plots now support drop shadow property.

- dojox.charting.widget classes now inherits from _WidgetBase instead of _Widget.

- Base class for themes is now SimpleTheme instead of Theme. Themes that require gradients still need to use Theme which now inherits from SimpleTheme.

Calendar
--------

A new Calendar component is introduced in dojox.calendar package. It displays events from a data store along time using
widespread representation and allows to interactively edit the position in time and duration of these events.

Gauges
------

A new gauges package is introduced in dojox.dgauges package. It provides a fully extensible gauges framework allowing
you to create your own gauges as well as predefined, ready to use gauge widgets. Both circular and rectangular
gauges (horizontal and vertical) are supported.


Treemap
-------

A new Treemap component is introduced in dojox.treemap package. It displays data as a set of colored, potentially nested, rectangular cells. Treemaps can be used to explore large data sets by using convenient drill-down capabilities. They reveal data patterns and trends easily. 


Util
====


Migration
=========

Dijit
-----
- Constructor parameters: Execution of custom setters during widget construction has slightly changed.
  This may affect custom widgets that adjust widget parameters in postMixInProperties().

  As before, during initialization, _setXyzAttr(val) is called for each attribute xyz passed to the constructor
  where the attribute has a corresponding _setXyzAttr() function or string.
  The change is that the value passed is the value specified to the constructor, rather than this.xyz.
  In other words, given a widget like

  .. js ::

    declare("MyWidget", {
         this.xyz: "",
         postMixInProperties: function(){
             this.xyz = "dog";
         },
         _setXyzAttr(val){
            ...
         }
    }

  and then calling the constructor with a custom value:

  .. js ::

    new MyWidget({xyz: "cat"})

  Then _setXyzAttr("cat") will be called, rather than _setXyzAttr("dog") like before.

- Connecting to Menu._openMyself(): If you have menus on Trees etc. where you have connected to the private
  method Menu._openMyself(), you should switch to the pattern shown above in the Menu section.

- Due to the event delegation performance improvements, if you have custom templates for TreeNode, MenuItem, or TabButton,
  you should edit the templates to remove the data-dojo-attach-event="..." attributes.

Dojox/mobile
------------
See https://www.ibm.com/developerworks/mydeveloperworks/blogs/ykami/entry/migration_to_dojox_mobile_1_82

